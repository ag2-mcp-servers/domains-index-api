# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:37:22+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import (
    APIKeyInfo,
    InfoStatGetResponse,
    InfoTldGetResponse,
    SearchResults,
    UpdateModel,
    ZoneInfo,
    ZoneStats,
)

app = MCPProxy(
    description='Domains-Index database powered API',
    title='Domains-Index API',
    version='1.0',
    servers=[{'url': '/v1'}],
)


@app.get('/domains/search', tags=['domain_search_operations', 'tld_data_services'])
def get_search_domain_item(
    api_key: Optional[str] = None,
    date: Optional[str] = None,
    page: Optional[str] = None,
    limit: Optional[int] = 50,
    domain: Optional[str] = None,
    zone: Optional[str] = None,
    country: Optional[str] = None,
    is_dead: Optional[bool] = Query(None, alias='isDead'),
    a: Optional[str] = Query(None, alias='A'),
    n_s: Optional[str] = Query(None, alias='NS'),
    c_n_a_m_e: Optional[str] = Query(None, alias='CNAME'),
    m_x: Optional[str] = Query(None, alias='MX'),
    t_x_t: Optional[str] = Query(None, alias='TXT'),
):
    """
    Domains Database Search
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains/tld/{zone_id}', tags=['domain_search_operations', 'tld_data_services']
)
def get_tld_domain_item(
    api_key: Optional[str] = None,
    date: Optional[str] = None,
    page: Optional[str] = None,
    limit: Optional[int] = 50,
    domain: Optional[str] = None,
    country: Optional[str] = None,
    is_dead: Optional[bool] = Query(None, alias='isDead'),
    a: Optional[str] = Query(None, alias='A'),
    n_s: Optional[str] = Query(None, alias='NS'),
    c_n_a_m_e: Optional[str] = Query(None, alias='CNAME'),
    m_x: Optional[str] = Query(None, alias='MX'),
    t_x_t: Optional[str] = Query(None, alias='TXT'),
    zone_id: str = ...,
):
    """
    Get TLD records
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/domains/tld/{zone_id}/download', tags=['tld_data_services'])
def get_domains_tld__zone_id_download(
    api_key: Optional[str] = None, date: Optional[str] = None, zone_id: str = ...
):
    """
    Download Whole Dataset for TLD
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains/tld/{zone_id}/search',
    tags=['domain_search_operations', 'tld_data_services'],
)
def get_domains_tld__zone_id_search(
    api_key: Optional[str] = None,
    date: Optional[str] = None,
    page: Optional[str] = None,
    limit: Optional[int] = 50,
    domain: Optional[str] = None,
    country: Optional[str] = None,
    is_dead: Optional[bool] = Query(None, alias='isDead'),
    a: Optional[str] = Query(None, alias='A'),
    n_s: Optional[str] = Query(None, alias='NS'),
    c_n_a_m_e: Optional[str] = Query(None, alias='CNAME'),
    m_x: Optional[str] = Query(None, alias='MX'),
    t_x_t: Optional[str] = Query(None, alias='TXT'),
    zone_id: str = ...,
):
    """
    Domains Search for TLD
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains/updates/added',
    tags=['domain_search_operations', 'domain_update_tracking'],
)
def get_domains_updates_added(
    api_key: Optional[str] = None,
    date: Optional[str] = None,
    page: Optional[str] = None,
    limit: Optional[int] = 50,
):
    """
    Get added domains, latest if date not specified
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains/updates/added/download',
    tags=['domain_update_tracking', 'domain_search_operations'],
)
def get_domains_updates_added_download(
    api_key: Optional[str] = None, date: Optional[str] = None
):
    """
    Download added domains, latest if date not specified
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains/updates/deleted',
    tags=['domain_update_tracking', 'domain_search_operations'],
)
def get_domains_updates_deleted(
    api_key: Optional[str] = None,
    date: Optional[str] = None,
    page: Optional[str] = None,
    limit: Optional[int] = 50,
):
    """
    Get deleted domains, latest if date not specified
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/domains/updates/deleted/download',
    tags=['domain_update_tracking', 'domain_search_operations'],
)
def get_domains_updates_deleted_download(
    api_key: Optional[str] = None, date: Optional[str] = None
):
    """
    Download deleted domains, latest if date not specified
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/domains/updates/list', tags=['domain_update_tracking'])
def get_domains_updates_list(api_key: Optional[str] = None):
    """
    List of updates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/info/api', tags=['api_usage_statistics'])
def get_api_info_item(api_key: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/info/stat/', tags=['api_usage_statistics'])
def get_statistics_collection(page: Optional[str] = None, limit: Optional[int] = 50):
    """
    Returns overall stagtistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/info/stat/{zone}', tags=['tld_data_services', 'api_usage_statistics'])
def get_statistics_item(
    page: Optional[str] = None, limit: Optional[int] = 50, zone: str = ...
):
    """
    Returns statistics for specific zone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/info/tld/', tags=['tld_data_services'])
def get_info_tld_():
    """
    Returns overall Tld info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/info/tld/{zone}', tags=['tld_data_services', 'api_usage_statistics'])
def get_info_tld__zone(
    page: Optional[str] = None, limit: Optional[int] = 50, zone: str = ...
):
    """
    Returns statistics for specific zone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
